openapi: 3.0.2
info:
  title: HomeGym REST API
  version: 0.0.1
paths:
  /api/events:
    get:
      security:
        - token: []
      tags:
        - events
      description: gets a page of events.
      operationId: getWorkouts
      parameters:
        - name: count
          description: The number of events to return
          in: query
          required: false
          schema:
            type: integer
        - name: date
          description: The date of the last event that was returned in the previous call.
          in: query
          required: false
          schema:
            type: integer
        - name: previousId
          description: The ID of the last event that was returned in the previous call.
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event' # TODO: make this a subset of event data

    post:
      security:
        - token: []
      description: Adds an event.
      tags:
        - events
      operationId: addWorkout
      requestBody:
        $ref: '#/components/requestBodies/newEvent'
      responses:
        '201':
          $ref: '#/components/responses/201'

  /api/events/{date}/{id}:
    parameters:
      - name: date
        in: path
        required: true
        schema:
          type: integer
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      security:
        - token: []
      description: |
        Updates an event with the field values included in the request body.
        A nil request body deletes the event.
      tags:
        - events
      operationId: updateWorkoutId
      requestBody:
        content:
          json/application:
            schema:
              type: object
              properties:
                activity:
                  type: string
                time:
                  type: integer
                meta:
                  $ref: '#/components/schemas/eventMeta'
      responses:
        200:
          description: OK

  /api/events/{id}/exercises:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      security:
        - token: []
      description: Add or update an exercise instance for an event.
      tags:
        - events
      requestBody:
        $ref: '#/components/requestBodies/postExercise'
      responses:
        '201':
          $ref: '#/components/responses/201'

  /api/events/metrics:
    parameters:
      - name: type
        in: query
        required: true
        description: The ID of the exercise type for which metrics are calculated.
        schema:
          type: string
      - name: start
        in: query
        required: true
        description: The start date of the range of events, in seconds since epoch.
        schema:
          type: string
      - name: end
        in: query
        required: true
        description: The end date of the range of events, in seconds since epoch.
        schema:
          type: string
    get:
      security:
        - token: []
      description: Returns an array of exercise metrics for the events that occurred within a date range.
      tags:
        - events
      responses:
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
        '403':
          $ref: '#/components/responses/403'
        '200':
          description: OK
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/metrics'
  /api/activities:
    get:
      security:
        - token: []
      description: returns a list of activity names and id's
      tags:
        - activities
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/activity'
    post:
      security:
        - token: []
      description: adds an activity, returns the id.
      tags:
        - activities
      requestBody:
        content:
          json/application:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        '201':
          $ref: '#/components/responses/201'
  /api/activities/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      security:
        - token: []
      description:
        updates an activity. Body includes the list of exercises and optionally
        the activity name
      tags:
        - activities
      requestBody:
        content:
          json/application:
            schema:
              $ref: '#/components/schemas/activity'
      responses:
        '201':
          $ref: '#/components/responses/201'
  /api/activities/{id}/exercises:
    get:
      security:
        - token: []
      description: returns a list of exercise types for an activity
      tags:
        - activities
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/exerciseType'
  /api/exercises:
    get:
      security:
        - token: []
      description: returns a list of exerciseType objects
      tags:
        - exercises
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/exerciseType'
    post:
      security:
        - token: []
      description: creates an exercise type and returns the id
      tags:
        - exercises
      responses:
        '201':
          $ref: '#/components/responses/201'
  /api/activities/{activityID}/programs:
    parameters:
      - name: activityID
        description: |
          The ID of the activity to which the programs pertain.
        in: path
        required: true
        schema:
          type: string
    get:
      security:
        - token: []
      description: returns a page of programs
      tags:
        - programs
      parameters:
        - name: size
          description: The number of programs to return
          in: query
          required: true
          schema:
            type: integer
        - name: previousId
          description: |
            The ID of the last program that was returned in the previous call.
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/program'
    post:
      security:
        - token: []
      description: Adds a program.
      tags:
        - programs
      requestBody:
        description: |
          A program object.
        content:
          json/application:
            schema:
              $ref: '#/components/schemas/program'
      responses:
        '201':
          $ref: '#/components/responses/201'
  /api/activities/{activityID}/programs/{id}:
    parameters:
      - name: activityID
        description: |
          The ID of the activity to which the program pertains.
        in: path
        required: true
        schema:
          type: string
      - name: id
        description: |
          The ID of the program.
        in: path
        required: true
        schema:
          type: string
    get:
      security:
        - token: []
      description: Returns a program.
      tags:
        - programs
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/program'
    post:
      security:
        - token: []
      description: Updates a program.
      tags:
        - programs
      requestBody:
        description: |
          A program object.
        content:
          json/application:
            schema:
              $ref: '#/components/schemas/program'
      responses:
        '200':
          $ref: '#/components/responses/200'
  /api/activities/{activityID}/programs/{programID}/instances:
    parameters:
      - name: activityID
        description: |
          The ID of the activity to which the program pertains.
        in: path
        required: true
        schema:
          type: string
      - name: programID
        description: |
          The ID of the program.
        in: path
        required: true
        schema:
          type: string
    get:
      security:
        - token: []
      description: Returns a page of program instances.
      tags:
        - programInstances
      parameters:
        - name: size
          description: The number of instances to return
          in: query
          required: true
          schema:
            type: integer
        - name: previousId
          description: |
            The ID of the last program instance that was returned in the previous call.
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/programInstance'
    post:
      security:
        - token: []
      description: Adds a program instance.
      tags:
        - programInstances
      requestBody:
        description: |
          Details about the program instance
        content:
          json/application:
            schema:
              $ref: '#/components/schemas/programInstanceDetails'
      responses:
        '201':
          description: OK
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/programInstance'

  /api/activities/{activityID}/programs/instances/active:
    parameters:
      - name: activityID
        description: |
          The ID of the activity to which the program pertains.
        in: path
        required: true
        schema:
          type: string

    get:
      security:
        - token: []
      description: Returns the active program instances for a program.
      tags:
        - programInstances
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/programInstance'
    post:
      security:
        - token: []
      description: Activates a program instance for an activity.
      tags:
        - programInstances
      parameters:
        - name: programid
          description: |
            The ID of the program.
          in: query
          required: true
          schema:
            type: string
        - name: instanceid
          description: |
            The ID of the program instance.
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
    delete:
      security:
        - token: []
      description: Deactivates an active program instance for an activity.
      tags:
        - programInstances
      parameters:
        - name: instanceid
          description: |
            The ID of the program instance.
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'

  /api/activities/{activityID}/programs/{programID}/instances/{id}:
    parameters:
      - name: activityID
        description: |
          The ID of the activity to which the program pertains.
        in: path
        required: true
        schema:
          type: string
      - name: programID
        description: |
          The ID of the program.
        in: path
        required: true
        schema:
          type: string
      - name: id
        description: |
          The ID of the program instance.
        in: path
        required: true
        schema:
          type: string
    get:
      security:
        - token: []
      description: returns a program instance
      tags:
        - programInstances
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                $ref: '#/components/schemas/programInstance'
    post:
      security:
        - token: []
      description: Updates a program instance.
      tags:
        - programInstances
      requestBody:
        description: |
          A program instance object.
        content:
          json/application:
            schema:
              $ref: '#/components/schemas/programInstance'
      responses:
        '200':
          $ref: '#/components/responses/200'

  /api/dailystats:
    get:
      security:
        - token: []
      description: Gets daily stats over a range of dates.
      tags:
        - dailyStats
      parameters:
        - name: start
          description: |
            The date of the first set of stats to get. To get stats from the beginning of time,
            do not include.
          in: query
          required: false
          schema:
            type: string
        - name: end
          description: |
            The date of the last set of stats to get. To get stats up to now, do not include.
          in: query
          required: false
          schema:
            type: string
        - name: pagesize
          description: |
            The number of stat sets to include in each page. To get stats for
            a single page, set to 1. Default value and maximum value is 3000.
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            json/application:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dailystats'
    post:
      security:
        - token: []
      description: Stores daily stats for a date.
      tags:
        - dailyStats
      parameters:
        - name: date
          in: query
          required: true
          schema:
            type: string
      requestBody:
        description: |
          A daily stats object. All fields are optional. Only the fields that are included are updated.
        content:
          json/application:
            schema:
              $ref: '#/components/schemas/dailystats'
      responses:
        '200':
          $ref: '#/components/responses/200'
components:
  schemas:
    activity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        exercises:
          type: array
          items:
            type: string
      required:
        - name
    exerciseType:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        intensityType:
          type: string
          enum:
            - MetricWeight
            - ImperialWeight
            - PercentOfMax
            - RPE10
            - HRZone5
        volumeType:
          type: string
          enum:
            - SetsReps
            - RepsDistance
            - RepsDuration
            - RepsDimension
        trackFailures:
          type: boolean
      required:
        - name
        - intensityType
        - volumeType
    set:
      type: object
      properties:
        index:
          type: integer
        intensity:
          type: number
        volume:
          type: number
    exercise:
      type: object
      properties:
        type:
          type: string
        index:
          type: integer
        parts:
          type: array
          items:
            $ref: '#components/schemas/set'
      required:
        - type
        - index
        - parts
    eventMeta:
      type: object
      properties:
        mood:
          type: integer
        motivation:
          type: integer
        energy:
          type: integer
        quality:
          type: integer
        notes:
          type: string
    event:
      type: object
      properties:
        activityID:
          type: string
        date:
          type: integer
        id:
          type: string
        meta:
          $ref: '#/components/schemas/eventMeta'
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/exercise'
      required:
        - activityID
        - date
    newEvent:
      type: object
      properties:
        activityID:
          type: string
        date:
          type: integer
        id:
          type: string
        meta:
          $ref: '#/components/schemas/eventMeta'
      required:
        - activityID
        - date
    workoutSegment:
      type: object
      properties:
        exerciseTypeID:
          type: string
        volume:
          type: string
        intensity:
          type: string
      required:
        - title
        - volume
    workout:
      type: object
      properties:
        title:
          type: string
        segments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/workoutSegment'
        intensity:
          type: string
      required:
        - title
        - segments
    microCycle:
      type: object
      properties:
        title:
          type: string
        span:
          type: number
        workouts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/workout'
        intensity:
          type: string
      required:
        - title
        - span
    programBlock:
      type: object
      properties:
        title:
          type: string
        microCycles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/microCycle'
        intensity:
          type: string
      required:
        - title
    program:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        activityID:
          type: string
        blocks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/programBlock'
      required:
        - title
        - activityID
    programInstance:
      type: object
      properties:
        id:
          type: string
        programID:
          type: string
        title:
          type: string
        startDate:
          type: number
        activityID:
          type: string
        blocks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/programBlock'
        complete:
          type: boolean
        events:
          type: object
          additionalProperties:
            additionalProperties: true
      required:
        - programID
        - title
        - activityID
    programInstanceDetails:
      type: object
      properties:
        programID:
          type: string
        title:
          type: string
        startDate:
          type: number
      required:
        - programID
        - title
        - startDate
    programInstanceAdded:
      type: object
      properties:
        id:
          type: string
        programID:
          type: string
        title:
          type: string
        startDate:
          type: number
        activityID:
          type: string
      required:
        - programID
        - title
        - activityID
    metrics:
      type: object
      properties:
        dates:
          description: An array of dates (seconds since epoch) that represent the dates of the events for which metrics are calculated.
          type: array
          items:
            type: integer
        volume:
          description: An array of volume values. Each value corresponds with the dates item of the same index.
          type: array
          items:
            type: number
        load:
          description: An array of load values. Each value corresponds with the dates item of the same index.
          type: array
          items:
            type: number
      required:
        - dates
        - volume
        - load
    dailystats:
      type: object
      properties:
        date:
          type: integer
          description: The date stamp of the daily stats, in seconds since epoch.
        bg:
          type: number
          description: Blood glucose reading.
        bp:
          type: array
          items:
            type: integer
          description: An array of size two that contains the systolic (index 0) and diastolic (index 1) values of the blood pressure.
        sleep:
          type: number
          description: The hours of sleep.
        food:
          type: object
          description: Details about food intake.
          properties:
            protein:
              type: integer
              description: Number of protein calories.
            carbs:
              type: integer
              description: Number of carb calories.
            fat:
              type: integer
              description: Number of fat calories.
            fiber:
              type: integer
              description: Grams of fiber.
            description:
              type: string
              description: A description of the food eaten.
        bodyweight:
          type: integer
          description: Body weight measured that day.
        mood:
          type: integer
          description: The mood rating for that day.
        stress:
          type: integer
          description: The stress rating for that day.
        energy:
          type: integer
          description: The energy rating for that day.

  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT

  requestBodies:
    event:
      content:
        json/application:
          schema:
            $ref: '#/components/schemas/event'
    newEvent:
      content:
        json/application:
          schema:
            $ref: '#/components/schemas/newEvent'
    postExercise:
      content:
        json/application:
          schema:
            $ref: '#/components/schemas/exercise'
  responses:
    '200':
      description: OK
    '201':
      description: OK
      content:
        json/application:
          schema:
            type: object
            properties:
              id:
                type: string
    '400':
      description: Bad Request
      content:
        json/application:
          schema:
            type: object
            properties:
              message:
                type: string
    '403':
      description: Forbidden
    '404':
      description: Not Found
      content:
        json/application:
          schema:
            type: object
            properties:
              message:
                type: string
    '500':
      description: Internal Server Error
      content:
        json/application:
          schema:
            type: object
            properties:
              message:
                type: string
